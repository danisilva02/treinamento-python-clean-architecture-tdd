name: Python API CD

on:
  push:
    branches: 
      - master

env:
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  PLATFORM: ${{ vars.PLATFORM }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: CD build and deploy
    runs-on: ubuntu-latest-arm64
    steps:
      - name: üèó Checkout Monorepo
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-buildx-${{ env.PROJECT_NAME }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.PROJECT_NAME }}

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_EKS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create AWS ECR repository if not exists
        uses: uspacy/aws-ecr-action@v1
        with:
          repositoryName: ${{ env.PROJECT_NAME }}
          countNumber: 3

      - name: Build and push
        uses: docker/build-push-action@v5
        env:
          AWS_ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        with:
          target: release
          platforms: ${{ env.PLATFORM }}
          tags: ${{ env.AWS_ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          push: true